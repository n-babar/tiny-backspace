from fastapi import FastAPI, Request
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
import asyncio
import json
import os
from git_operations import GitOperations
from coding_agent import CodingAgent

app = FastAPI(
    title="Tiny Backspace",
    description="A minimal coding agent that creates GitHub PRs from prompts",
    version="1.0.0"
)

class CodeRequest(BaseModel):
    repoUrl: str
    prompt: str

@app.get("/")
async def root():
    """Root endpoint with API information"""
    return {
        "name": "Tiny Backspace",
        "description": "A minimal coding agent that creates GitHub PRs from prompts",
        "version": "1.0.0",
        "endpoints": {
            "/": "API information",
            "/health": "Health check",
            "/code": "POST - Create PR from coding prompt"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "tiny-backspace"}

async def event_generator(repo_url: str, prompt: str):
    """Generate streaming events for the coding process"""
    git_ops = None
    agent = None
    
    try:
        # Get GitHub token from environment
        github_token = os.getenv('GITHUB_TOKEN')
        
        # Step 1: Clone repository
        yield f"data: {json.dumps({'type': 'info', 'message': 'Received request', 'repoUrl': repo_url, 'prompt': prompt})}\n\n"
        await asyncio.sleep(0.5)
        
        yield f"data: {json.dumps({'type': 'progress', 'message': 'Cloning repository...'})}\n\n"
        git_ops = GitOperations(github_token)
        sandbox_dir = git_ops.clone_repo(repo_url)
        yield f"data: {json.dumps({'type': 'success', 'message': f'Repository cloned to {sandbox_dir}'})}\n\n"
        await asyncio.sleep(0.5)
        
        # Step 2: Initialize coding agent
        yield f"data: {json.dumps({'type': 'progress', 'message': 'Initializing coding agent...'})}\n\n"
        agent = CodingAgent(sandbox_dir)
        analysis = agent.analyze_repository()
        file_count = len(analysis["files"])
        yield f"data: {json.dumps({'type': 'info', 'message': f'Repository analysis complete. Found {file_count} files.'})}\n\n"
        await asyncio.sleep(0.5)
        
        # Step 3: Generate changes
        yield f"data: {json.dumps({'type': 'progress', 'message': 'Analyzing prompt and generating changes...'})}\n\n"
        changes = agent.generate_changes(prompt)
        yield f"data: {json.dumps({'type': 'info', 'message': f'Generated {len(changes)} changes'})}\n\n"
        await asyncio.sleep(0.5)
        
        # Step 4: Apply changes
        if changes:
            yield f"data: {json.dumps({'type': 'progress', 'message': 'Applying changes to repository...'})}\n\n"
            applied_changes = agent.apply_changes(changes)
            for change in applied_changes:
                yield f"data: {json.dumps({'type': 'change', 'message': change})}\n\n"
                await asyncio.sleep(0.2)
        else:
            yield f"data: {json.dumps({'type': 'warning', 'message': 'No changes generated for this prompt'})}\n\n"
        
        # Step 5: Git operations
        if changes:
            yield f"data: {json.dumps({'type': 'progress', 'message': 'Creating git branch...'})}\n\n"
            branch_name = f"feature/auto-{prompt.lower().replace(' ', '-')[:20]}"
            git_ops.create_branch(branch_name)
            yield f"data: {json.dumps({'type': 'success', 'message': f'Created branch: {branch_name}'})}\n\n"
            await asyncio.sleep(0.5)
            
            yield f"data: {json.dumps({'type': 'progress', 'message': 'Committing changes...'})}\n\n"
            commit_message = f"Auto-generated changes: {prompt}"
            git_ops.commit_changes(commit_message)
            yield f"data: {json.dumps({'type': 'success', 'message': 'Changes committed'})}\n\n"
            await asyncio.sleep(0.5)
            
            # Step 6: Push and create PR (if token available)
            if github_token:
                yield f"data: {json.dumps({'type': 'progress', 'message': 'Pushing branch to remote...'})}\n\n"
                try:
                    git_ops.push_branch(branch_name)
                    yield f"data: {json.dumps({'type': 'success', 'message': 'Branch pushed to remote'})}\n\n"
                    await asyncio.sleep(0.5)
                    
                    yield f"data: {json.dumps({'type': 'progress', 'message': 'Creating pull request...'})}\n\n"
                    pr_title = f"Auto-generated: {prompt}"
                    pr_body = f"""
## Auto-generated changes

This PR was automatically generated based on the prompt: "{prompt}"

### Changes made:
{chr(10).join([f"- {change}" for change in applied_changes])}

### Generated by Tiny Backspace
                    """
                    
                    pr_url = git_ops.create_pull_request(repo_url, branch_name, pr_title, pr_body)
                    yield f"data: {json.dumps({'type': 'success', 'message': 'Pull request created!', 'pr_url': pr_url})}\n\n"
                    
                except Exception as e:
                    yield f"data: {json.dumps({'type': 'error', 'message': f'Failed to create PR: {str(e)}'})}\n\n"
            else:
                yield f"data: {json.dumps({'type': 'warning', 'message': 'No GitHub token provided. Skipping PR creation.'})}\n\n"
        
        # Step 7: Final result
        if changes and github_token:
            yield f"data: {json.dumps({'type': 'done', 'message': 'Process completed successfully!', 'pr_url': pr_url, 'changes': applied_changes})}\n\n"
        elif changes:
            yield f"data: {json.dumps({'type': 'done', 'message': 'Changes applied locally. Set GITHUB_TOKEN to create PR.', 'changes': applied_changes})}\n\n"
        else:
            yield f"data: {json.dumps({'type': 'done', 'message': 'No changes were made for this prompt.'})}\n\n"
            
    except Exception as e:
        yield f"data: {json.dumps({'type': 'error', 'message': f'Error: {str(e)}'})}\n\n"
    finally:
        # Cleanup
        if git_ops:
            git_ops.cleanup()

@app.post("/code")
async def code_endpoint(request: Request, body: CodeRequest):
    async def streamer():
        async for event in event_generator(body.repoUrl, body.prompt):
            yield event
            await asyncio.sleep(0.1)  # Reduced delay for better UX
    return StreamingResponse(streamer(), media_type="text/event-stream") 